import os
import psycopg2
import pytest
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from tests.api.api_endpoints.register_user import RegisterUser
# from tests.api.api_endpoints.base_endpoint import url
import requests
import time
from tests.api.api_endpoints.base_endpoint import EndpointApi
# from webdriver_manager.chrome import ChromeDriverManager # Comment for docker

@pytest.fixture
def driver():
    options = Options()
    options.add_argument("--start-maximized")
    service = Service(ChromeDriverManager(driver_version="134.0.6998.89").install())
    config_driver = webdriver.Chrome(service=service, options=options)
    yield config_driver
    config_driver.quit()

DB_PARAMS = {
    'dbname': os.environ.get('POSTGRES_DB', 'taskmanager'),
    'user': os.environ.get('POSTGRES_USER', 'postgres'),
    'password': os.environ.get('POSTGRES_PASSWORD', 'postgres'),
    'host': os.environ.get('POSTGRES_HOST', 'localhost'),
    'port': os.environ.get('POSTGRES_PORT', '5432')
}

@pytest.fixture(scope="function")
def db_connection():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    conn = psycopg2.connect(**DB_PARAMS)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    yield conn  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç
    #cursor = conn.cursor()
    cur = conn.cursor()
    sql_delete = 'DELETE FROM "task"'
    print(f"üîç –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ –ë–î... ")
    cur.execute(sql_delete)
    # sql_delete =  """DELETE FROM "user" WHERE username != 'test1'"""
    sql_delete = 'DELETE FROM "user"'
    print(f"üîç –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î... (–∫—Ä–æ–º–µ test1) ")
    cur.execute(sql_delete)
    # –£–∑–Ω–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
    rows_deleted = cur.rowcount
    print(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {rows_deleted}")


    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –£–î–ê–õ–ï–ù–ò–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î...")
    #cur.execute('SELECT username, password FROM "user" WHERE username != %s', ('test1',))
    cur.execute('SELECT username, password FROM "user"')
    del_user = cur.fetchone()
    cur.close()
    assert del_user is None, f" ‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î"
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î! ")
    # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.commit()


    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")



@pytest.fixture(scope="function")
def register_user():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    test_user_data = {
        "username": "test1",
        "password": "12121212"
    }
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = RegisterUser()
    response = requests.post(f"http://web:5000/api/register", json=test_user_data)
    response_json = response.json()
    if response.status_code == 400:
        print(response_json)
    else:
        print("New test user was created: ", response_json)
        new_user.new_user(test_user_data)
        print("Test user {test1, 12121212} was created via fixture")
