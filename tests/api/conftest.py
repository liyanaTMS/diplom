import pytest
from tests.api.api_endpoints.login_user import LoginUser
from tests.api.api_endpoints.register_user import RegisterUser
from tests.api.payload.payload import valid_user_payload, valid_task_payload

import os
import pytest
import allure
import requests
import psycopg2


URL = "http://web:5000/api/" # –¥–ª—è –¥–æ–∫–µ—Ä–∞


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
DB_PARAMS = {
    'dbname': os.environ.get('POSTGRES_DB', 'taskmanager'),
    'user': os.environ.get('POSTGRES_USER', 'postgres'),
    'password': os.environ.get('POSTGRES_PASSWORD', 'postgres'),
    'host': os.environ.get('POSTGRES_HOST', 'db'),
    'port': os.environ.get('POSTGRES_PORT', '5432')
}

# URL API-—Å–µ—Ä–≤–µ—Ä–∞
#BASE_URL = "http://web:5000/api"

# –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
TEST_USER = {"username": "testuser1", "password": "testpass"}

@pytest.fixture(scope="function")
def db_connection():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    conn = psycopg2.connect(**DB_PARAMS)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    yield conn  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç
    #cursor = conn.cursor()
    cur = conn.cursor()
    sql_delete = 'DELETE FROM task'
    cur.execute(sql_delete)
    sql_delete = 'DELETE FROM "user"'
    cur.execute(sql_delete)
    # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.commit()

    # –£–∑–Ω–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
    rows_deleted = cur.rowcount
    print(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {rows_deleted}")
    # print(f"üîç –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {valid_user_payload['username']} –∏–∑ –ë–î...")
    # cursor.execute('DELETE FROM "user" WHERE username = %s', (valid_user_payload["username"],))
    # conn.commit()
    # print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –£–î–ê–õ–ï–ù–ò–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î...")
    # cursor.execute('SELECT username, password FROM "user" WHERE username = %s', (valid_user_payload["username"],))
    # del_user = cursor.fetchone()
    # cursor.close()
    # assert del_user is None, f" ‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ID {valid_user_payload['username']}"
    # print(f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {valid_user_payload['username']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î! ")

    conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")


@pytest.fixture(scope="function")
def register_and_login_user():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    test_user_data = {
        "username": "L",
        "password": "123456"
    }
    # 1 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = RegisterUser()
    new_user.new_user(test_user_data)
    print("New user was created via fixture")

    # 2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = requests.Session()
    log_user = LoginUser()
    log_user.login_user(test_user_data, session)
    print("New user was logged in via fixture ")
    return session

def db_connection_for_user(db_conn):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
  # –°–æ–∑–¥–∞—ë–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...")
    cursor = db_conn.cursor()
    cursor.execute('SELECT id, username, password FROM "user" WHERE username = %s', (valid_user_payload['username'],))
    user = cursor.fetchone()
    cursor.close()
    print(f"---------–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user}")
  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö API –¥–∞–Ω–Ω—ã–º –≤ –ë–î
    assert valid_user_payload["username"] == user[1], f'Expected {valid_user_payload["username"]}, got {user[1]}'
    user_id = user[0]
    assert user is not None, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!"
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ID {user_id}")


def db_connection_for_task(db_conn, task_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏ –≤ –ë–î"""
  # –°–æ–∑–¥–∞—ë–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ —Å ID {task_id} –≤ –ë–î...")
    cursor = db_conn.cursor()
    cursor.execute('SELECT id, title, description, completed FROM "task" WHERE id = %s', (task_id,))
    task = cursor.fetchone()
    cursor.close()
    print(f"---------–ó–∞–¥–∞—á–∞ {task}")
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö API –¥–∞–Ω–Ω—ã–º –≤ –ë–î
    assert valid_task_payload["title"] == task[1], f'Expected {valid_task_payload["title"]}, got {task[1]}'
    assert valid_task_payload["description"] == task[2], f'Expected {valid_task_payload["description"]}, got {task[2]}'
    assert valid_task_payload["completed"] == task[3], f'Expected {valid_task_payload["completed"]}, got {task[3]}'

    assert task is not None, f"‚ùå –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!"
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: ID {task_id}")


def db_connection_for_deleted_task(db_conn, del_task_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –£–î–ê–õ–ï–ù–ò–Ø –∑–∞–¥–∞—á–∏ {del_task_id} –∏–∑ –ë–î...")
    cursor = db_conn.cursor()
    cursor.execute('SELECT id, title, description, completed FROM "task" WHERE id = %s', (del_task_id,))
    task = cursor.fetchone()
    cursor.close()
    assert task is None, f" ‚ùå –£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: ID {del_task_id}"
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ {del_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î! ")




# @pytest.fixture
# def authenticated_user():
#     auth = AuthenticateUser()
#     auth.login_user(valid_user)
#     auth.check_response_is_200()
#     return auth

@pytest.fixture(params=[
    (valid_user_payload, True)
])
def test_data(request):
    return request.param