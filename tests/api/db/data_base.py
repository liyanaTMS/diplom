from tests.api.api_endpoints.login_user import LoginUser
from tests.api.api_endpoints.register_user import RegisterUser
from tests.api.payload.payload import valid_user_payload, valid_task_payload
import os
import pytest
import requests
import psycopg2

URL = "http://web:5000/api/" # –¥–ª—è –¥–æ–∫–µ—Ä–∞


def db_connection_for_user(db_conn):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
  # –°–æ–∑–¥–∞—ë–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...")
    cursor = db_conn.cursor()
    cursor.execute('SELECT id, username, password FROM "user" WHERE username = %s', (valid_user_payload['username'],))
    user = cursor.fetchone()
    cursor.close()
    print(f"---------–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user}")
  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö API –¥–∞–Ω–Ω—ã–º –≤ –ë–î
    assert valid_user_payload["username"] == user[1], f'Expected {valid_user_payload["username"]}, got {user[1]}'
    user_id = user[0]
    assert user is not None, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!"
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ID {user_id}")


def db_connection_for_task(db_conn, task_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏ –≤ –ë–î"""
  # –°–æ–∑–¥–∞—ë–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ —Å ID {task_id} –≤ –ë–î...")
    cursor = db_conn.cursor()
    cursor.execute('SELECT id, title, description, completed FROM "task" WHERE id = %s', (task_id,))
    task = cursor.fetchone()
    cursor.close()
    print(f"---------–ó–∞–¥–∞—á–∞ {task}")
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö API –¥–∞–Ω–Ω—ã–º –≤ –ë–î
    assert valid_task_payload["title"] == task[1], f'Expected {valid_task_payload["title"]}, got {task[1]}'
    assert valid_task_payload["description"] == task[2], f'Expected {valid_task_payload["description"]}, got {task[2]}'
    assert valid_task_payload["completed"] == task[3], f'Expected {valid_task_payload["completed"]}, got {task[3]}'

    assert task is not None, f"‚ùå –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!"
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: ID {task_id}")



def db_connection_for_deleted_task(db_conn, del_task_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –£–î–ê–õ–ï–ù–ò–Ø –∑–∞–¥–∞—á–∏ {del_task_id} –∏–∑ –ë–î...")
    cursor = db_conn.cursor()
    cursor.execute('SELECT id, title, description, completed FROM "task" WHERE id = %s', (del_task_id,))
    task = cursor.fetchone()
    cursor.close()
    assert task is None, f" ‚ùå –£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: ID {del_task_id}"
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ {del_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î! ")



